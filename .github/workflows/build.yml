name: build

on:
  push:
    branches: [ unstable, '[0-9]+.[0-9]+.x' ]
  pull_request:
    branches: [ unstable, '[0-9]+.[0-9]+.x' ]
  workflow_call:
  workflow_dispatch:

env:
  CMAKE_C_COMPILER_LAUNCHER: ccache
  CMAKE_CXX_COMPILER_LAUNCHER: ccache
  CCACHE_COMPILERCHECK: content
  CCACHE_BASEDIR: ${{ github.workspace }}
  CCACHE_DIR: ${{ github.workspace }}/.ccache
  CCACHE_MAXSIZE: 500M
  CCACHE_SLOPPINESS: pch_defines,time_macros,include_file_mtime,include_file_ctime
  CCACHE_COMPRESS: "1"
  CCACHE_COMPRESSLEVEL: "1"

jobs:
  build:

    strategy:
      fail-fast: false
      matrix:
        include:
          - {os: ubuntu-22.04, cc: gcc-12, cxx: g++-12, doc: OFF, cov: ON}
          - {os: ubuntu-22.04, cc: clang-15, cxx: clang++-15, doc: ON, cov: OFF}
          - {os: macos-12, cc: gcc-12, cxx: g++-12, doc: OFF, cov: OFF}
          - {os: macos-12, cc: clang, cxx: clang++, doc: OFF, cov: OFF}

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - uses: actions/cache/restore@v3
      with:
        path: ${{ env.CCACHE_DIR }}
        key: ccache-${{ matrix.os }}-${{ matrix.cc }}-${{ github.run_id }}
        restore-keys:
          ccache-${{ matrix.os }}-${{ matrix.cc }}-

    - name: Install ubuntu dependencies
      if: matrix.os == 'ubuntu-22.04'
      run: >
        sudo apt-get update &&
        sudo apt-get install lsb-release wget software-properties-common &&
        wget -O /tmp/llvm.sh https://apt.llvm.org/llvm.sh && sudo chmod +x /tmp/llvm.sh && sudo /tmp/llvm.sh 15 &&
        sudo apt-get install
        ccache
        clang-15
        g++-12
        gfortran
        hdf5-tools
        libblas-dev
        libclang-15-dev
        libc++-15-dev
        libc++abi-15-dev
        libomp-15-dev
        libfftw3-dev
        libgfortran5
        libgmp-dev
        libhdf5-dev
        liblapack-dev
        libopenmpi-dev
        openmpi-bin
        openmpi-common
        openmpi-doc
        python3-clang-15
        python3-dev
        python3-mako
        python3-mpi4py
        python3-numpy
        python3-pip
        python3-scipy
        python3-sphinx
        python3-nbsphinx

    - name: Install gcovr for test coverage
      if: matrix.cov == 'ON'
      run: |
        python3 -m venv --system-site-packages $HOME/.venv/my_python
        source $HOME/.venv/my_python/bin/activate
        pip install gcovr
        echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
        echo "PATH=$PATH" >> $GITHUB_ENV

    - name: Install homebrew dependencies
      if: matrix.os == 'macos-12'
      run: |
        brew install ccache gcc@12 llvm hdf5 open-mpi openblas
        mkdir $HOME/.venv
        python3 -m venv $HOME/.venv/my_python
        source $HOME/.venv/my_python/bin/activate
        pip install mako numpy scipy mpi4py
        pip install -r requirements.txt
        echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
        echo "PATH=$PATH" >> $GITHUB_ENV

    - name: Build doxygen
      if: matrix.doc == 'ON'
      env:
        CC: ${{ matrix.cc }}
        CXX: ${{ matrix.cxx }}
        LIBRARY_PATH: /usr/local/opt/llvm/lib
      run: |
        cd $HOME
        git clone https://github.com/doxygen/doxygen.git
        cd doxygen
        git checkout 0a7e79813
        mkdir build
        cd build
        cmake .. -Duse_libclang=ON -Dstatic_libclang=ON -Duse_libc++=OFF -DLLVM_ROOT=/usr/lib/llvm-15/lib/cmake/llvm -DClang_ROOT=/usr/lib/llvm-15/lib/cmake/clang
        make -j 2 VERBOSE=1
        cp bin/doxygen /usr/local/bin/doxygen

    - name: add clang cxxflags
      if: ${{ contains(matrix.cxx, 'clang') }}
      run: |
        echo "PATH=/usr/local/opt/llvm/bin:$PATH" >> $GITHUB_ENV
        echo "CXXFLAGS=-stdlib=libc++" >> $GITHUB_ENV

    - name: Prepare source files for doxygen
      if: matrix.doc == 'ON'
      working-directory: ./c++/nda
      run: |
        sed -e '/#include .*impl.*.hpp/{r _impl_basic_array_view_common.hpp' -e 'd' -e '}' basic_array.hpp > tmp_basic_array.hpp
        sed -e '/#include .*impl.*.hpp/{r _impl_basic_array_view_common.hpp' -e 'd' -e '}' basic_array_view.hpp > tmp_basic_array_view.hpp
        mv tmp_basic_array.hpp basic_array.hpp
        mv tmp_basic_array_view.hpp basic_array_view.hpp

    - name: Build nda without test coverage
      if: matrix.cov == 'OFF'
      env:
        CC: ${{ matrix.cc }}
        CXX: ${{ matrix.cxx }}
        LIBRARY_PATH: /usr/local/opt/llvm/lib
      run: |
        mkdir build && cd build && cmake .. -DCMAKE_INSTALL_PREFIX=$HOME/install -DBuild_Documentation=${{ matrix.doc }} -DPythonSupport=ON
        make -j2 || make -j1 VERBOSE=1

    - name: Build nda with test coverage
      if: matrix.cov == 'ON'
      env:
        CC: ${{ matrix.cc }}
        CXX: ${{ matrix.cxx }}
        LIBRARY_PATH: /usr/local/opt/llvm/lib
        CXXFLAGS: "${{ env.CXXFLAGS }} --coverage"
      run: |
        mkdir build && cd build && cmake .. -DCMAKE_INSTALL_PREFIX=$HOME/install -DPythonSupport=OFF -DCMAKE_BUILD_TYPE=Debug
        make -j2 || make -j1 VERBOSE=1

    - name: Test nda
      env:
        DYLD_FALLBACK_LIBRARY_PATH: /usr/local/opt/llvm/lib
        OPENBLAS_NUM_THREADS: "1"
      run: |
        cd build
        ctest -j2 --output-on-failure

    - name: Generate test coverage HTML output
      if: matrix.cov == 'ON'
      run: |
        cd build
        mkdir coverage
        gcovr --gcov-executable "gcov-12" --root ../c++ --html-details -o coverage/coverage.html .

    - name: ccache statistics
      if: always()
      run: ccache -sv

    - uses: actions/cache/save@v3
      if: always()
      with:
        path: ${{ env.CCACHE_DIR }}
        key: ccache-${{ matrix.os }}-${{ matrix.cc }}-${{ github.run_id }}

    - name: Deploy documentation
      if: matrix.doc == 'ON' && github.ref == 'refs/heads/unstable'
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        folder: build/doc/html
        branch: github.io
        target-folder: docs/unstable

    - name: Deploy test coverage
      if: matrix.cov == 'ON' && github.ref == 'refs/heads/unstable'
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        folder: build/coverage
        branch: github.io
        target-folder: docs/coverage
